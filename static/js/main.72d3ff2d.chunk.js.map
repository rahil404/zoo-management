{"version":3,"sources":["zoo5.jpg","components/form.jsx","components/allAnimals.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","props","changeHandler","e","setState","target","name","value","handleChange","event","selectedgroup","console","log","state","groupname","animalname","Fragment","className","style","width","margin","marginTop","onSubmit","preventDefault","addAnimal","border","for","required","this","onChange","type","id","placeholder","groups","map","group","addGroup","marginBottom","React","Component","AllAnimals","textAlign","class","scope","animals","animal","find","g","group_id","last_checkup","onClick","checkup","deleteAnimal","deleteGroup","App","Object","assign","length","push","alert","index","findIndex","x","splice","filter","an","parseInt","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","item","backgroundImage","Background","height","backgroundPosition","backgroundRepeat","backgroundSize","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","path","exact","render","position","bottom","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72d3ff2d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zoo5.40959fb5.jpg\";","import React from \"react\";\r\n\r\nclass Form extends React.Component {\r\n    constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      groupname: \"\",\r\n      animalname: \"\",\r\n      selectedgroup: 0\r\n    };\r\n  }\r\n\r\n  changeHandler = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ selectedgroup: event.target.value },\r\n      () => {\r\n        console.log(this.state.selectedgroup);\r\n      }\r\n      );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n      <div className=\"row border p-5 bg-light rounded\" style={{ width:\"68%\", margin:\"auto\", marginTop:100 }}>\r\n        \r\n        <div className=\"col-md-6\">\r\n          <form onSubmit={(event) => {\r\n            event.preventDefault();\r\n            this.props.addAnimal(this.state.animalname, this.state.selectedgroup);\r\n          }}\r\n           className=\"rounded border border-secondary\"  style={{border:\"1px solid black\"}}>\r\n            <h3 className=\"bg-secondary text-white rounded text-center p-2\">New Animal</h3>\r\n            <div className=\"p-3\">\r\n              <div className=\"form-group\">\r\n              <label for=\"name\">Animal Name</label>\r\n              <input required name=\"animalname\" value={this.state.animalname} onChange={this.changeHandler} type=\"text\" className=\"form-control\" id=\"name\" placeholder=\"Enter animal name\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label for=\"sel1\">Select Group:</label>\r\n              <select required onChange={this.handleChange} value={this.state.selectedgroup} className=\"form-control\" id=\"sel1\">\r\n                <option value=\"\">None</option>\r\n                {this.props.groups.map(group => (\r\n                  <option value={group.id}>{group.name}</option>\r\n                ))}\r\n                \r\n              </select>\r\n            </div>\r\n            <button \r\n            type='submit' className=\"btn btn-info btn-md\">Add Animal</button>\r\n            </div>\r\n          </form>\r\n          \r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <form onSubmit={(event) => {\r\n            event.preventDefault();\r\n            this.props.addGroup(this.state.groupname);\r\n          }} className=\"rounded border border-success\"  style={{border:\"1px solid black\"}}>\r\n            <h3 className=\"bg-success text-white rounded text-center p-2\">New Group</h3>\r\n            <div className=\"p-3\">\r\n              <div className=\"form-group\">\r\n              <label for=\"group-name\">Animal Group</label>\r\n              <input required name=\"groupname\" value={this.state.groupname} onChange={this.changeHandler} className=\"form-control\" id=\"name\" type=\"text\" placeholder=\"Enter group name\" />\r\n            </div>\r\n            <button style={{marginBottom:40}} type=\"submit\" className=\"btn btn-info btn-md\">Add Group</button>\r\n            </div>\r\n            \r\n          </form> \r\n        </div>        \r\n      </div>     \r\n\r\n      </React.Fragment> \r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\r\n\r\nclass AllAnimals extends Component {\r\n    constructor(props) {\r\n    super(props);\r\n    console.log(\"constructor\", this);\r\n    //this.handleClick = this.handleClick.bind(this); //binding event handlers with 'this' (in case of non-arrow func)\r\n  }\r\n  state = {\r\n\r\n  };\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row border p-5 bg-light rounded\" style={{ width:\"80%\", margin:\"auto\", marginTop:50 }}>\r\n          <div className=\"col-md-7\">\r\n          <h3 style={{ textAlign:\"center\", marginBottom: 15 }}>Animals</h3>\r\n            <table class=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">Animal ID</th>\r\n                  <th scope=\"col\">Name</th>\r\n                  <th scope=\"col\">Group</th>\r\n                  <th scope=\"col\">Last Checkup</th>\r\n                  <th scope=\"col\">Update Checkup</th>\r\n                  <th scope=\"col\">Delete</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {\r\n                  this.props.animals.animals.map(animal => {\r\n                    let group = this.props.animals.groups.find(g => g.id === animal.group_id);\r\n                    return (\r\n                    <tr>\r\n                      <th scope=\"col\">{animal.id}</th>\r\n                      <th scope=\"col\">{animal.name}</th>\r\n                      <th scope=\"col\">{group.name}</th>\r\n                      <th scope=\"col\">{animal.last_checkup}</th>\r\n                      <th scope=\"col\">\r\n                        <button className=\"btn btn-sm btn-primary\" onClick={() => this.props.checkup(animal.id)} type=\"button\">Update</button>\r\n                      </th>\r\n                      <th scope=\"col\">\r\n                        <button className=\"btn btn-sm btn-danger\" onClick={() => this.props.deleteAnimal(animal.id)}>Delete</button>\r\n                      </th>\r\n                    </tr>\r\n                    );\r\n                  } )\r\n                }\r\n                  \r\n              </tbody>\r\n                \r\n            </table>\r\n          </div>\r\n          <div className=\"col-md-5\">\r\n          <h3 style={{ textAlign:\"center\", marginBottom: 15 }}>Groups</h3>\r\n            <table class=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">Group ID</th>\r\n                  <th scope=\"col\">Group Name</th>\r\n                  <th scope=\"col\">Delete</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {\r\n                  this.props.animals.groups.map(animal => (\r\n                    <tr>\r\n                      <th scope=\"col\">{animal.id}</th>\r\n                      <th scope=\"col\">{animal.name}</th>\r\n                      <th scope=\"col\">\r\n                        <button className=\"btn btn-sm btn-danger\" onClick={() => this.props.deleteGroup(animal.id)}>Delete</button>\r\n                      </th>\r\n                    </tr>\r\n                    ))\r\n                }\r\n                  \r\n              </tbody>\r\n                \r\n            </table>\r\n          </div>\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AllAnimals;\r\n","import React from \"react\";\nimport Form from \"./components/form\";\nimport AllAnimals from \"./components/allAnimals\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport Background from './zoo5.jpg';\n\nclass App extends React.Component {\n    constructor(props) {\n    super(props);\n    console.log(\"constructor\", this);\n    //this.handleClick = this.handleClick.bind(this); //binding event handlers with 'this' (in case of non-arrow func)\n    \n  }\n  state = {\n    animals: {\n      groups:[\n        {\n          id: 1,\n          name: \"Penguin\"\n        },\n        {\n          id: 2,\n          name: \"Tiger\"\n        },\n      ],\n      animals: [\n        {\n          id: 1,\n          name: \"Paul\",\n          group_id: 1,\n          last_checkup: \"01-01-2019\"\n        },\n        {\n          id: 2,\n          name: \"Jimmy\",\n          group_id: 2,\n          last_checkup: \"05-01-2019\"\n        },\n      ]\n    },\n  };\n\n  addGroup = group => {\n    console.log(group)\n    this.setState(state => {\n      let animals = Object.assign({}, state.animals);\n      if (animals.groups.length == 0) {\n        animals.groups.push({id:1,name:group});\n        return {animals};\n      } else {\n        let last_item = animals.groups[animals.groups.length - 1];\n        let id = last_item.id+1;\n        console.log(id);\n        animals.groups.push({id:id,name:group});\n        return {animals};\n      }\n      \n    }, () => {\n\n      alert(\"group added!\");\n    })\n  };\n\n  deleteGroup = group => {\n    \n    this.setState(state => {\n      let animals = Object.assign({}, state.animals);\n      let index = animals.groups.findIndex(x => x.id === group);\n      animals.groups.splice(index, 1);\n      console.log(animals);\n      animals.animals = animals.animals.filter(an => an.group_id !== group);\n      return {animals};\n    })\n  };\n\n  deleteAnimal = id => {\n    \n    this.setState(state => {\n      let animals = Object.assign({}, state.animals);\n      let index = animals.animals.findIndex(x => x.id === id);\n      animals.animals.splice(index, 1);\n      console.log(animals);\n      return {animals};\n    })\n  };\n\n  addAnimal = (animal, group) => {\n    this.setState(state => {\n      let animals = Object.assign({}, state.animals);\n      if (animals.animals.length == 0) {\n        animals.animals.push({\n          id: 1,\n          name: animal,\n          group_id: parseInt(group),\n          last_checkup: \"N/A\"\n        });\n        return {animals};\n      } else {\n        let last_item = animals.animals[animals.animals.length - 1];\n        let id = last_item.id+1;\n        console.log(id);\n        animals.animals.push({\n          id: id,\n          name: animal,\n          group_id: parseInt(group),\n          last_checkup: \"N/A\"\n        });\n        return {animals};\n        }\n      \n    }, () => {\n      alert(\"Animal added!\");\n    });\n  };\n\n  checkup = (id) => {\n    var today = new Date();\n    let dd = String(today.getDate()).padStart(2, '0');\n    let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    let yyyy = today.getFullYear();\n\n    today = dd + '-' + mm + '-' + yyyy;\n    let animals = Object.assign({}, this.state.animals);\n      animals.animals.find((item) => {\n       if (item.id === id) {\n           item.last_checkup = today;\n        }\n    });\n    this.setState({animals}, () => {\n      console.log(\"checkup updated!\");\n    });\n  }\n\n  render() {\n\n    return (\n    <div style={{ \n      backgroundImage: `url(${Background})`, \n      height: \"900px\",\n      backgroundPosition: \"center\",\n      backgroundRepeat: \"no-repeat\",\n      backgroundSize: \"cover\" }}>\n      <Router>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-info text-white\">\n          <p className=\"navbar-brand text-white\" href=\"#\">        \n            <strong>Zoo Management System</strong>\n          </p>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarNavAltMarkup\"\n            aria-controls=\"navbarNavAltMarkup\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\" />\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n            <div className=\"navbar-nav\">\n              <Link className=\"font-weight-bold nav-item nav-link text-white\" to='/'>\n                Home\n              </Link>\n              <Link className=\"font-weight-bold nav-item nav-link text-white\" to='/animals'>\n                All Animals\n              </Link>\n            </div>\n          </div>\n        </nav>\n\n        <Route\n          path=\"/\"\n          exact\n          render={props => (\n            <Form\n              {...props}\n               addGroup={this.addGroup}\n               addAnimal={this.addAnimal} \n               groups={this.state.animals.groups}\n            />\n          )}\n        />\n        <Route \n          path=\"/animals\" \n          render={(props) => (\n              <AllAnimals\n               {...props} \n               animals={this.state.animals}\n               deleteGroup={this.deleteGroup}\n               deleteAnimal={this.deleteAnimal}\n               checkup={this.checkup}\n               />\n            )} \n          />\n        {/* <p>Hello</p> */}\n        <div style={{position:\"fixed\", bottom: 0, width: \"100%\", textAlign: \"center\"}} className=\"footer\">\n          <div className=\"text-white p-3 bg-info\">© 2019 copyright <strong>zoo-management</strong></div>\n        </div>\n      </Router>      \n    </div>\n  );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap.min.js\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}